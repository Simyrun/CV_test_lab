Index: venv/hw4.py
===================================================================
diff --git a/venv/hw4.py b/venv/hw4.py
deleted file mode 100644
--- a/venv/hw4.py	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
+++ /dev/null	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
@@ -1,7 +0,0 @@
-import re
-text = input("write your line : ")
-regular = r"\d+"
-# если быть честным, то тут происходит магия из интернета (когда нибудь я её пойму).
-filtertext = list(map(int, re.findall('-?[0-9]+', text)))
-result= sum(filtertext)
-print(result)
Index: venv/hw3.py
===================================================================
diff --git a/venv/hw3.py b/venv/hw3.py
deleted file mode 100644
--- a/venv/hw3.py	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
+++ /dev/null	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
@@ -1,13 +0,0 @@
-# После запуска предлагает пользователю ввести текст.
-# 2. В качестве ответа печатает наиболее часто встречающееся в тексте слово
-# или несколько таких слов, если имеет место "ничья". Также указывая
-# сколько именно раз слово встретилось в тексте. (Игнорируйте заглавные буквы
-# при отождествлении слов - то есть считайте слова "Подлодка" и "подлодка"
-# одинаковыми, а разные формы слов - разными словами)
-# После чего ждет следующего ввода
-line = input("Please write line with spaсe :  ").lower().split(' ')
-unique_list =set(line)
-for i in unique_list:
-    count = line.count(i)
-    if count != 1:
-        print(count, "-", i)
Index: venv/hw5.py
===================================================================
diff --git a/venv/hw5.py b/venv/hw5.py
deleted file mode 100644
--- a/venv/hw5.py	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
+++ /dev/null	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
@@ -1,18 +0,0 @@
-def find_missing(number):
-    start = number[0]
-    end = number[-1]
-    result = sorted(set(range(start, end + 1)).difference(number))
-    for i in result:
-        if i == None:
-            return "none"
-        else:
-            result = min(sorted(set(range(start, end + 1)).difference(number)))
-            return result
-
-test_list = input("Write you number line : ").split(' ')
-for i in range(0, len(test_list)):  #цикл перевода строчного списка в числовой
-    test_list[i] = int(test_list[i])
-
-#lst = [2, 1, 8, 4, 2, 3, 5, 7, 10, 18, 82, 2]
-
-print(find_missing(sorted(test_list)))
\ No newline at end of file
Index: venv/hw6.py
===================================================================
diff --git a/venv/hw6.py b/venv/hw6.py
deleted file mode 100644
--- a/venv/hw6.py	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
+++ /dev/null	(revision 21595bac83e864eb5d5226e61da896dbad113a77)
@@ -1,57 +0,0 @@
-# Python3 Program for Checking
-# double base Palindrome.
-
-# converts number to base
-# k by changing it into string.
-def integer_to_string(n, base):
-    str = "";
-    while (n > 0):
-        digit = n % base;
-        n = int(n / base);
-        str = chr(digit + ord('0')) + str;
-    return str;
-
-
-# function to check for palindrome
-def isPalindrome(i, k):
-    temp = i;
-
-    # m stores reverse of a number
-    m = 0;
-    while (temp > 0):
-        m = (temp % 10) + (m * 10);
-        temp = int(temp / 10);
-
-    # if reverse is equal to number
-    if (m == i):
-
-        # converting to base k
-        str = integer_to_string(m, k);
-        str1 = str;
-
-        # reversing number in base k
-        # str=str[::-1];
-
-        # checking palindrome
-        # in base k
-        if (str[::-1] == str1):
-            return i;
-    return 0;
-
-
-# function to find sum of palindromes
-def sumPalindrome(n, k):
-    sum = 0;
-    for i in range(n):
-        sum += isPalindrome(i, k);
-    print("Total sum is", sum);
-
-
-# Driver code
-n = 1000000;
-k = 2;
-
-sumPalindrome(n, k);
-
-# This code is contributed
-# by mits
diff --git a/venv/hw2.py b/venv/hw2.py
deleted file mode 100644
